// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
  
model Course {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String 
  title String
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String
  category Category @relation(fields: [categoryId], references: [id])
  @@index([categoryId])

  attachments Attachment[]
  chapters Chapter[]
  purchases Purchase[]
}

model Category {
  id String @id @default(uuid())
  
  name String

  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  url String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@index([courseId])

  muxData MuxData?
}

model MuxData {
  id String @id @default(uuid())
  
  assetId String
  playbackId String? 

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  stripeCustomerId String @unique
}

model Purchase {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  userId String @unique

  courseId String @unique
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@index([courseId])
}